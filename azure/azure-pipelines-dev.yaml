trigger:
  branches:
    include:
      - dev

pr: none

pool:
  vmImage: ubuntu-latest

variables:
  kubernetesServiceConnection: Datahub-DEV-uni-apps-aks-dev-ictd-oi-datahub-dev-1684231863813
  kubernetesNamespace: ictd-oi-datahub-dev
  postgresqlPass: $(POSTGRESQL_PASS)
  neo4jPass: $(NEO4J_PASS)
  datahubUserProps: $(DATAHUB_USER_PROPS)
  aadClientId: $(AUTH_OIDC_CLIENT_ID)
  aadClientSecret: $(AUTH_OIDC_CLIENT_SECRET)
  aadTenantId: $(AUTH_OIDC_TENANT_ID)
  datahubHost: $(DATAHUB_HOST)
  system.debug: true

steps:
  - task: Kubernetes@1
    displayName: Create secret for PostgreSQL password
    continueOnError: true
    inputs:
      connectionType: "Kubernetes Service Connection"
      kubernetesServiceEndpoint: $(kubernetesServiceConnection)
      namespace: $(kubernetesNamespace)
      command: create
      arguments: "secret generic postgresql-secrets --from-literal=postgres-password=$(postgresqlPass)"

  - task: Kubernetes@1
    displayName: Create secret for Neo4j password
    continueOnError: true
    inputs:
      connectionType: "Kubernetes Service Connection"
      kubernetesServiceEndpoint: $(kubernetesServiceConnection)
      namespace: $(kubernetesNamespace)
      command: create
      arguments: "secret generic neo4j-secrets --from-literal=neo4j-password=$(neo4jPass)"

  - task: Kubernetes@1
    displayName: Create secret for Datahub admin credentials
    continueOnError: true
    inputs:
      connectionType: "Kubernetes Service Connection"
      kubernetesServiceEndpoint: $(kubernetesServiceConnection)
      namespace: $(kubernetesNamespace)
      command: create
      arguments: "secret generic datahub-users-secret --from-literal=user.props=$(datahubUserProps)"

  - task: Kubernetes@1
    displayName: Create secret for Azure AD client secret
    continueOnError: true
    inputs:
      connectionType: "Kubernetes Service Connection"
      kubernetesServiceEndpoint: $(kubernetesServiceConnection)
      namespace: $(kubernetesNamespace)
      command: create
      arguments: "secret generic giga-datahub --from-literal=AUTH_OIDC_CLIENT_SECRET=$(aadClientSecret)"

  - task: HelmDeploy@0
    displayName: Add Datahub Helm Repo
    inputs:
      connectionType: Kubernetes Service Connection
      kubernetesServiceEndpoint: $(kubernetesServiceConnection)
      command: "repo"
      arguments: "add datahub https://helm.datahubproject.io/"
      namespace: $(kubernetesNamespace)

  - task: HelmDeploy@0
    displayName: Deploy Datahub Prerequisites
    enabled: true
    continueOnError: true
    inputs:
      connectionType: Kubernetes Service Connection
      kubernetesServiceEndpoint: $(kubernetesServiceConnection)
      command: "upgrade"
      chartType: Name
      chartName: datahub/datahub-prerequisites
      releaseName: prerequisites
      namespace: $(kubernetesNamespace)
      arguments: "--values $(Build.SourcesDirectory)/helm/prerequisites-values.yaml"

  - task: HelmDeploy@0
    displayName: Helm deploy Datahub
    inputs:
      connectionType: Kubernetes Service Connection
      kubernetesServiceEndpoint: $(kubernetesServiceConnection)
      command: "upgrade"
      chartType: Name
      chartName: datahub/datahub
      releaseName: datahub
      namespace: $(kubernetesNamespace)
      arguments: >
        --timeout 1h
        --values $(Build.SourcesDirectory)/helm/values.yaml
        --set datahub-frontend.ingress.hosts[0].host=$(datahubHost)
        --set datahub-frontend.oidcAuthentication.clientId=$(aadClientId)
        --set datahub-frontend.oidcAuthentication.azureTenantId=$(aadTenantId)

  - task: Kubernetes@1
    displayName: Set up Ingress
    inputs:
      connectionType: Kubernetes Service Connection
      kubernetesServiceEndpoint: $(kubernetesServiceConnection)
      namespace: $(kubernetesNamespace)
      command: apply
      useConfigurationFile: true
      configuration: $(Build.SourcesDirectory)/k8s/ingress.yaml
