jobs:
  - deployment: Deploy
    displayName: Create/update K8s configuration resources
    environment: $(kubernetesEnvironment)
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: Kubernetes@1
              displayName: Verify namespace secrets
              inputs:
                namespace: $(kubernetesNamespace)
                command: get
                arguments: secret oi-datahub-secrets-$(deployEnv) -o yaml --ignore-not-found

            - task: Kubernetes@1
              displayName: Create secret for PostgreSQL password
              inputs:
                namespace: $(kubernetesNamespace)
                configurationType: inline
                command: apply
                useConfigurationFile: true
                inline: |
                  apiVersion: v1
                  kind: Secret
                  metadata:
                    name: postgresql-secrets
                    labels:
                      app.kubernetes.io/name: giga-datahub
                      app.kubernetes.io/part-of: giga-dataops-platform
                      app.kubernetes.io/component: datahub
                  stringData:
                    postgres-password: "$(postgresqlPass)"

            - task: Kubernetes@1
              displayName: Create secret for Neo4j password
              inputs:
                namespace: $(kubernetesNamespace)
                configurationType: inline
                command: apply
                useConfigurationFile: true
                inline: |
                  apiVersion: v1
                  kind: Secret
                  metadata:
                    name: neo4j-secrets
                    labels:
                      app.kubernetes.io/name: giga-datahub
                      app.kubernetes.io/part-of: giga-dataops-platform
                      app.kubernetes.io/component: datahub
                  stringData:
                    neo4j-password: "$(neo4jPass)"

            - task: Kubernetes@1
              displayName: Create secret for Datahub admin credentials
              inputs:
                namespace: $(kubernetesNamespace)
                configurationType: inline
                command: apply
                useConfigurationFile: true
                inline: |
                  apiVersion: v1
                  kind: Secret
                  metadata:
                    name: datahub-users-secret
                    labels:
                      app.kubernetes.io/name: giga-datahub
                      app.kubernetes.io/part-of: giga-dataops-platform
                      app.kubernetes.io/component: datahub
                  stringData:
                    user.props: "$(datahubUserProps)"

            - task: Kubernetes@1
              displayName: Create general Datahub secrets
              # FIXME: Temporary workaround while Azure AD B2C secrets are being tested
              condition: or(eq(variables.environment, 'dev'), eq(variables.environment, 'stg'))
              inputs:
                namespace: $(kubernetesNamespace)
                configurationType: inline
                command: apply
                useConfigurationFile: true
                inline: |
                  apiVersion: v1
                  kind: Secret
                  metadata:
                    name: giga-datahub-secrets
                    labels:
                      app.kubernetes.io/name: giga-datahub
                      app.kubernetes.io/part-of: giga-dataops-platform
                      app.kubernetes.io/component: datahub
                  stringData:
                    AZURE_CLIENT_ID: "$(azureClientId)"
                    AZURE_CLIENT_SECRET: "$(azureClientSecret)"
                    AUTH_OIDC_DISCOVERY_URI: "https://$(azureTenantName).b2clogin.com/$(azureTenantName).onmicrosoft.com/$(azurePolicyName)/v2.0/.well-known/openid-configuration"
                    AUTH_OIDC_BASE_URL: "https://$(ingressHost)"
                    AUTH_OIDC_SCOPE: "openid https://$(azureTenantName).onmicrosoft.com/$(azureClientId)/User.Impersonate"

            - task: Kubernetes@1
              displayName: Create general production-config Datahub secrets
              condition: eq(variables.environment, 'prd')
              inputs:
                namespace: $(kubernetesNamespace)
                configurationType: inline
                command: apply
                useConfigurationFile: true
                inline: |
                  apiVersion: v1
                  kind: Secret
                  metadata:
                    name: giga-datahub-secrets
                    labels:
                      app.kubernetes.io/name: giga-datahub
                      app.kubernetes.io/part-of: giga-dataops-platform
                      app.kubernetes.io/component: datahub
                  stringData:
                    AUTH_OIDC_DISCOVERY_URI: "https://$(azureTenantName).b2clogin.com/$(azureTenantName).onmicrosoft.com/$(azurePolicyName)/v2.0/.well-known/openid-configuration"
                    AUTH_OIDC_BASE_URL: "https://$(ingressHost)"
                    AUTH_OIDC_SCOPE: "openid profile offline_access"
